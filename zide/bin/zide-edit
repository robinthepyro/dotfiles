#!/usr/bin/env bash

source "${ZIDE_DIR}/bin/lib/getEditorCommand.sh"

read -r -d '' HELP_TEXT << EOF
Usage: $(basename "$0") [OPTIONS] <path>...

Parameters:
  <path>...              List of paths to open in the \`$EDITOR\` pane.

Options:
  -h, --help             Show this help message and exit.
  -c, --command          How to open files in your \`$EDITOR\`.
                         (One of open, hsplit, or vsplit).

Description:
  Handles reading in a list of paths from stdin and uses Zellij's action
  commands to switch to \`$EDITOR\`'s pane and runs the open commands in it.
EOF

# Function to display the help text
show_help() {
  echo "$HELP_TEXT"
}

# Command to perform on the paths, available commands will be based on your editor
command="open"

# Parse command-line options
while [[ $# -gt 0 ]]; do
  case "$1" in
    -h|--help)
      show_help
      exit 0
      ;;
    -c|--command)
      if [[ -n "$2" && "$2" != -* ]]; then
        command="$2"
        shift 2
      else
        echo "Error: --command requires a non-empty value."
        exit 1
      fi
      ;;
    -*)
      echo "Unknown option: $1"
      echo "Use --help or -h for usage information."
      exit 1
      ;;
    *)
      # Stop processing options when a positional parameter is encountered
      break
      ;;
  esac
done

paths=("$@")
# Ensure paths with special chars (like spaces) are properly escaped
escaped_paths=()
for path in "${paths[@]}"; do
  escaped_paths+=("$(printf "%q" "$path")")
done
path=${escaped_paths[0]}

# Focus editor pane, must be the next pane after yazi
zellij action focus-next-pane

# If we're trying to open a single path and it's a directory, change the working dir to it in our
# editor. This ensures any other commands in our editor (such as :open, :mv, etc) have the correct
# cwd set.
if [ ! -f "${path}" ] && [ ${#escaped_paths[@]} -eq 1 ]; then
  cdCommand="$(getEditorCommand $ZIDE_ORIGINAL_EDITOR cd)"
	zellij action write 27 # send <Escape> key to enter NORMAL mode
	zellij action write-chars ":${cdCommand} ${path}"
	zellij action write 13 # send <Enter> key

	# The longer the path string, the longer we need to wait so that zellij has time to write out
	# the path before moving on. Through some trial and error, I found that dividing the length by
	# 150 gives it sufficient time to get through it. Calculating this based on string length vs
	# a static value makes sure we don't end up with a long wait time for short paths that don't
	# need to wait as long.
	sleep $(echo "${#path} / 150" | bc -l)
fi

# Open paths in the editor
if [[ -n "${escaped_paths}" ]]; then
	zellij action write 27 # send <Escape> key to enter NORMAL mode
	zellij action write-chars ":$(getEditorCommand $ZIDE_ORIGINAL_EDITOR ${command}) ${escaped_paths[*]}"
	zellij action write 13 # send <Enter> key
fi
